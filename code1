#include <gl/freeglut.h>
#include<iostream>
#include<math.h>
#define PI 3.141592
bool enlarged = false;
float scaleFactor = 1.0;
void drawBox()
{
	//Red Cube
	glColor3f(1.0, 0.0, 0.0);
	glBegin(GL_QUADS);
	glVertex3f(-0.15, -0.15, 0.0);
	glVertex3f(0.15, -0.15, 0.0);
	glVertex3f(0.15, 0.15, 0.0);
	glVertex3f(-0.15, 0.15, 0.0);
	glEnd();
	glLoadIdentity();
	// Translation & Rotation – 역으로 transformation 수행
	glTranslatef(0.6, 0.0, 0.0);
	glRotatef(45.0, 0.0, 0.0, 1.0);
	// Blue Cube
	glColor3f(0.0, 0.0, 1.0);
	glutSolidCube(0.3);

	glLoadIdentity();
	//Green Cube
	glTranslatef(0.4, 0.5, 0.0);
	glRotatef(45.0, 0.0, 0.0, 1.0);
	glColor3f(0.0, 1.0, 0.0);
	glutSolidCube(0.3);
	//Gray Cube
	glLoadIdentity();
	glTranslatef(-0.4, 0.5, 0.0);
	glRotatef(45.0, 0.0, 0.0, 1.0);
	glColor3f(0.5, 0.5, 0.5);
	glutSolidCube(0.3);
	//Purple Cube
	glLoadIdentity();
	glTranslatef(-0.4, -0.5, 0.0);
	glRotatef(45.0, 0.0, 0.0, 1.0);
	glColor3f(1.0, 0.0, 1.0);
	glutSolidCube(0.3);
	//YellowCube
	glLoadIdentity();
	glTranslatef(0.4, -0.5, 0.0);
	glRotatef(45.0, 0.0, 0.0, 1.0);
	glColor3f(1.0, 1.0, 0.0);
	glutSolidCube(0.3);
	glLoadIdentity();
	if (enlarged) {
		glTranslatef(1.0, -1.0, 0.0);
		glScalef(scaleFactor, scaleFactor, 0.0);
		glTranslatef(-1.0, 1.0, 0.0);
	}
	//skyblue Cube
	glTranslatef(0.85, -0.85, 0.0);
	glColor3f(0.0, 1.0, 1.0);
	glutSolidCube(0.3);
	

}


void display(void)
{
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	glPushMatrix();
	glRotatef(0.0, 1.0, 1.0, 1.0);
	drawBox();
	glPopMatrix();


	glFlush();
}

void xyzRotate(unsigned char mode)
{
	switch (mode) {
	case 'x': glRotatef(10.0, 1.0, 0.0, 0.0); break;
	case 'y': glRotatef(10.0, 0.0, 1.0, 0.0); break;
	case 'z': glRotatef(10.0, 0.0, 0.0, 1.0); break;
	default: break;
	}
}


void keyboard(unsigned char key, int x, int y)
{
	switch (key)
	{
	case 'x': xyzRotate('x'); break;
	case 'y': xyzRotate('y'); break;
	case 'z': xyzRotate('z'); break;
	case 's': glScalef(2.0f, 2.0f, 2.0f);    // 확대
	case 'a': glScalef(0.9f, 0.9f, 0.9f);   // 축소

		// 평행이동 (문서: t/r)
	case 't': glTranslatef(0.2f, 0.0f, 0.0f); break; // 오른쪽
	case 'r': glTranslatef(-0.2f, 0.0f, 0.0f); break;
	
	default: break;
	}
	if (key == 'f') {           
		enlarged = true;
		scaleFactor *= 2.0;
		glutPostRedisplay();
	}
	
	glutPostRedisplay();
}

int main(int argc, char** argv)
{
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_RGBA | GLUT_DEPTH | GLUT_SINGLE);
	glutCreateWindow("Transformation");
	// Set Background Color
	glClearColor(1.0, 1.0, 1.0, 0.0); // white (R, G, B, Alpha)
	glutDisplayFunc(display);
	glutKeyboardFunc(keyboard);
	glutMainLoop();
	return 0;
}
